# !/usr/bin/python
# -*- coding: utf-8 -*-

"""
    中国人民大学自动完成课程作业系统
"""
import base64
import io
from PIL import Image as pilImage
from tkinter import messagebox
from tkinter import *
from tkinter import ttk
from unrar import rarfile
from win32com import client as wc
import fnmatch
from pyquery import PyQuery as pq
from gevent import monkey

monkey.patch_all()
import urllib2, urllib, re, time, os, cookielib, inspect, codecs, random


class App(Frame):
    file_base_path = 'C:\\Program Files\\autotask'
    window = Tk()
    qrcode_label = False

    backgroud_img = ''

    def get_opener(self):
        self.cookiejar = cookielib.CookieJar()
        handler = urllib2.HTTPCookieProcessor(self.cookiejar)
        opener = urllib2.build_opener(handler)
        return opener

    # 登录函数
    def usr_log_in(self):
        # 输入框获取用户名密码
        usr_name = self.var_usr_name.get()
        usr_pwd = self.var_usr_pwd.get()
        code = self.var_code.get()
        if usr_name == '' or usr_pwd == '':
            messagebox.showerror(message='用户名或密码为空')
        elif code == '':
            messagebox.showerror(message='验证码不能为空')
        else:
            task = Task(usr_name, usr_pwd, code, self.cookiejar)
            login_result = task.login()
            if "loginok" in login_result:
                self.window.destroy()
                task.init_tk()
            else:
                messagebox.showerror(message='账号密码或验证码输入错误')

    def init(self):
        self.get_window_position()
        self.window.title('中国人民大学自动完成课程作业系统')
        self.window.resizable(0, 0)
        self.window.geometry('790x220')
        # 画布放置图片
        canvas = Canvas(self.window, height=220, width=790)
        login_bg_path = os.path.join(self.file_base_path, 'images', 'login_bg.gif')
        file = open(login_bg_path, 'wb')
        file.write(base64.b64decode(self.backgroud_img))
        file.close()
        imagefile = PhotoImage(file=login_bg_path)
        canvas.create_image(0, 0, anchor='nw', image=imagefile)
        canvas.pack(side='top')
        # 标签 用户名密码
        Label(self.window, text='账户:', bd=0, width=10).place(x=550, y=51)
        Label(self.window, text='密码:', bd=0, width=10).place(x=550, y=81)
        Label(self.window, text='验证码:', bd=0, width=10).place(x=550, y=121)

        # 用户名输入框
        self.var_usr_name = StringVar()
        entry_usr_name = Entry(self.window, textvariable=self.var_usr_name, bd=1)
        entry_usr_name.place(x=610, y=50)
        # 密码输入框
        self.var_usr_pwd = StringVar()
        entry_usr_pwd = Entry(self.window, textvariable=self.var_usr_pwd, show='*', bd=1)
        entry_usr_pwd.place(x=610, y=80)
        # http: // learning.cmr.com.cn / member / SW_Code.asp?aid = 23000101 & f = html & ck = 1 & t = 1568002912633
        # 验证码
        self.var_code = StringVar()
        entry_usr_code = Entry(self.window, textvariable=self.var_code, bd=1, width=8)
        entry_usr_code.place(x=610, y=120)
        self.get_qrcode()
        # 登录 注册按钮
        bt_login = Button(self.window, text='登录', command=self.usr_log_in, width=28, bd=0)
        bt_login.place(x=550, y=150)
        self.window.mainloop()

    def get_qrcode(self):
        if self.qrcode_label:
            self.qrcode_label.destroy()
        opener = self.get_opener()
        opener.open("http://learning.cmr.com.cn/")
        qrcode_result = opener.open(
            "http://learning.cmr.com.cn/member/SW_Code.asp?aid=23000101&f=html&ck=1&t=1568002912633")
        image_bytes = qrcode_result.read()
        byte_stream = io.BytesIO(image_bytes)
        roi_img = pilImage.open(byte_stream)
        img_byte_arr = io.BytesIO()
        roi_img.save(img_byte_arr, format='GIF')
        img_byte_arr = img_byte_arr.getvalue()
        qrcode_path = os.path.join(self.file_base_path, 'images', 'qrcode.gif')
        with open(qrcode_path, "wb") as p:
            p.write(img_byte_arr)
        self.photo = PhotoImage(file=qrcode_path)
        self.qrcode_button = Button(self.window, command=self.get_qrcode, bd=0, width=80, height=19, image=self.photo)
        self.qrcode_button.place(x=670, y=120)

    # 计算窗口居中的位置
    def get_window_position(self):
        sw = self.window.winfo_screenwidth()
        # 得到屏幕宽度
        sh = self.window.winfo_screenheight()
        # 得到屏幕高度
        ww = 790
        wh = 220
        # 窗口宽高为100
        x = (sw - ww) / 2
        y = (sh - wh) / 2
        self.window.geometry("%dx%d+%d+%d" % (ww, wh, x, y))

    def __init__(self, **kw):
        if not os.path.exists(self.file_base_path): os.makedirs(self.file_base_path)
        images_path = os.path.join(self.file_base_path, "images")
        if not os.path.exists(images_path): os.makedirs(images_path)
        Frame.__init__(self, **kw)
        self.init()
        # 主循环


'''
    作业类
'''


class Task:
    # 登录的用户名和密码
    username = ""
    password = ""
    url = ""  # 作业请求地址
    previous_cookie = ""  # cookie
    all_task_url = {}  # 作业地址
    treeview_item = 0

    def init_tk(self):
        window = Tk()
        window.title("开始自动完成课程作业中")
        window.geometry("1024x600")
        window.resizable(0, 0)
        sw = window.winfo_screenwidth()
        # 得到屏幕宽度
        sh = window.winfo_screenheight()
        # 得到屏幕高度
        ww = 1024
        wh = 600
        # 窗口宽高为100
        x = (sw - ww) / 2
        y = (sh - wh) / 2
        window.geometry("%dx%d+%d+%d" % (ww, wh, x, y))
        scr = Scrollbar(window)
        columns = ("时间", "日志")
        self.treeview = ttk.Treeview(window, height=18, show="headings", columns=columns, yscrollcommand=scr.set)  # 表格
        scr.config(command=self.treeview.yview)
        scr.pack(side=RIGHT, fill=Y)
        self.treeview.column("时间", width=224, anchor='center')  # 表示列,不显示
        self.treeview.column("日志", width=800, anchor='center')
        self.treeview.heading("时间", text="时间")  # 显示表头
        self.treeview.heading("日志", text="日志")
        self.treeview.pack(side=LEFT, fill=BOTH)
        bt_login = Button(window, text='开始自动作业', command=self.run, width=50, bd=1)
        bt_login.place(x=300, y=570)

    def log_insert(self, value):
        # 给表格中添加数据
        if not (isinstance(value, str) or isinstance(value, unicode)):
            value = str(value)
        self.treeview.insert('', self.treeview_item,
                             values=(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), value))
        self.treeview_item += 1
        self.treeview.pack(side=LEFT, fill=BOTH)

    def __init__(self, username, password, code, cookie):
        # 第一个参数为第一层级，可能在这不太好理解，下篇文章中说到树状结构就理解了
        self.username = username
        self.password = password
        self.code = code
        for index, cookie in enumerate(cookie):
            self.previous_cookie += cookie.name + '=' + cookie.value + ';'

    def login(self):
        login_result = self.getHtmlSource("http://learning.cmr.com.cn/member/checklogin.asp", data={
            "userid": self.username,
            "password": self.password,
            "passcode": self.code,
            "saveuserid": "",
            "loginfrom": ""
        })
        login_result = login_result.decode("ISO-8859-1").encode('utf-8', 'ignore')
        return login_result

    '''
        urllib2请求
    '''

    def getHtmlSource(self, url, data=None):
        try:
            # 建立带有cookie的opener
            cookie = cookielib.CookieJar()
            cookieProc = urllib2.HTTPCookieProcessor(cookie)
            # 创建 "opener"
            opener = urllib2.build_opener()
            opener.add_handler(cookieProc)
            # 使用 opener 获取一个URL
            opener.open(url)

            # 安装 opener.
            urllib2.install_opener(opener)
            headers = {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'zh-CN,zh;q=0.8',
                'Connection': 'keep-alive',
                'Cookie': self.previous_cookie,
                'Referer': 'http://learning.cmr.com.cn',
                'User-Agent': self.randHeaderUserAgent(),
                'Content-Type': 'text/html; charset=UTF-8'
            }
            # post数据
            if data:
                headers['Content-Type'] = 'application/x-www-form-urlencoded'
                data = urllib.urlencode(data)
                url = urllib2.Request(url, data, headers)
            else:
                url = urllib2.Request(url, headers=headers)
            # urllib2.urlopen 使用上面的opener.
            ret = urllib2.urlopen(url)
            # self.previous_cookie = ''
            for index, cookie in enumerate(cookie):
                self.previous_cookie += cookie.name + '=' + cookie.value + ';'
            # print '请求完成，等待3秒！'
            # time.sleep(3)
            return ret.read()
        except urllib2.HTTPError, e:
            if e.code == 401:
                print u"账号或密码错误！"
                self.log_insert(u"账号或密码错误！")
                return "authorization failed"
            else:
                raise e
        except:
            return None

    '''
        随机header用户头
    '''

    def randHeaderUserAgent(self):
        head_user_agent = ['Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko',
                           'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36',
                           'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; rv:11.0) like Gecko)',
                           'Mozilla/5.0 (Windows; U; Windows NT 5.2) Gecko/2008070208 Firefox/3.0.1',
                           'Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070309 Firefox/2.0.0.3',
                           'Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070803 Firefox/1.5.0.12',
                           'Opera/9.27 (Windows NT 5.2; U; zh-cn)',
                           'Mozilla/5.0 (Macintosh; PPC Mac OS X; U; en) Opera 8.0',
                           'Opera/8.0 (Macintosh; PPC Mac OS X; U; en)',
                           'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.12) Gecko/20080219 Firefox/2.0.0.12 Navigator/9.0.0.6',
                           'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0)',
                           'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)',
                           'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET4.0C; .NET4.0E)',
                           'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Maxthon/4.0.6.2000 Chrome/26.0.1410.43 Safari/537.1 ',
                           'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET4.0C; .NET4.0E; QQBrowser/7.3.9825.400)',
                           'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0 ',
                           'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.92 Safari/537.1 LBBROWSER',
                           'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; BIDUBrowser 2.x)',
                           'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/3.0 Safari/536.11']
        return head_user_agent[random.randrange(0, len(head_user_agent))]

    '''
        获取未完成作业路径
    '''

    def getNotTask(self):
        item_title = ""
        url = "http://learning.cmr.com.cn/myCourse/homeworkList.asp"
        print u'获取未完成作业列表...'
        self.log_insert(u'获取未完成作业列表...')
        html = self.getHtmlSource(url)
        if "window.top.location.href" in html:
            print u"账号或密码错误！"
            self.log_insert(u'账号或密码错误！')
            return "authorization failed"
        regex_content = re.compile(
            '<tr.*?>.*?<td.*?>\s?(.*?)</td>.*?<td.*?>(.*?)</td>.*?<td.*?>(.*?)</td>\s*</tr>',
            re.S)
        items = re.findall(regex_content, html.decode('gb2312').encode('utf-8'))
        for item in items:
            item_title = str(item[0]).decode('utf-8')
            if item[2].isdigit():
                surplus = int(item[1]) - int(item[2])
                if (surplus) > 0:
                    print item_title + u':剩余' + str(surplus).decode('ascii') + u'项作业未完成！'
                    self.log_insert(item_title + u':剩余' + str(surplus).decode('ascii') + u'项作业未完成！')
                    subject_list_url = "http://learning.cmr.com.cn/myCourse/mycourse.asp"
                    subject_list_html = self.getHtmlSource(subject_list_url)
                    # print subject_list_html
                    d = pq(subject_list_html)
                    subject_list_items = d(".mycourse").find('div').children('a')
                    for subject_list_item in subject_list_items:
                        if item_title == pq(subject_list_item).text()[0:-1]:
                            task_url = pq(subject_list_item).attr('href')
                    print task_url
                    self.log_insert(task_url)
                    task_html = self.getHtmlSource(task_url)
                    regex_content = re.compile(
                        '{\'courseid\':\'(.*?)\'}',
                        re.S)
                    task_items = re.findall(regex_content, task_html)
                    if task_items:
                        self.all_task_url[
                            item_title] = "http://learning.cmr.com.cn/student/acourse/HomeworkCenter/index.asp?courseid=" + \
                                          task_items[0]
                    else:
                        print u'无法完成该科目！' + item_title
                        self.log_insert(u'无法完成该科目！' + item_title)
                    print self.all_task_url
                    self.log_insert(self.all_task_url)

                else:
                    print item_title + u':已完成全部作业'
                    self.log_insert(item_title + u':已完成全部作业')
            else:
                print item_title + u':已完成全部作业'
                self.log_insert(item_title + u':已完成全部作业')
        else:
            print u'已完成全部作业'
            self.log_insert(item_title + u':已完成全部作业')

    '''
        下载答案
    '''

    def downloadTask(self, html):
        regex_content = re.compile(
            '<div.*?class="button_blue2".*?href=\"(.+?)\"',
            re.S)
        items = re.findall(regex_content, html)
        print "downloading with urllib"
        self.log_insert("downloading with urllib")
        filedir_child = os.path.join(App.file_base_path, "task")  # 解压后放入的目录
        filedir = os.path.join(filedir_child, "task_" + time.strftime('%Y%m%d%H%I%S'))  # 解压后放入的目录
        if not os.path.isdir(filedir_child): os.mkdir(filedir_child)
        if not os.path.isdir(filedir): os.mkdir(filedir)
        rar_path = os.path.join(filedir, "task.rar")
        if not items:
            print u'无法完成主观题！'
            self.log_insert(u'无法完成主观题！')
            return False
        print items[0] + '=======>' + rar_path  # 下载地址
        self.log_insert(items[0] + '=======>' + rar_path)
        urllib.urlretrieve(items[0], rar_path)
        print "download finish"
        self.log_insert("download finish")
        print "unrar...!"
        self.log_insert("unrar...!")
        file = rarfile.RarFile(rar_path)  # 这里写入的是需要解压的文件，别忘了加路径
        file.extractall(filedir)  # 这里写入的是你想要解压到的文件夹
        print "unrar finish!"
        self.log_insert("unrar finish!")
        answer_path = self.translate(filedir)
        if not os.path.exists(answer_path):
            notic = "自动转换失败，请将:" + filedir + " 下的word文件，复制为txt文件保存到:" + answer_path + "后按回车键！"
            raw_input(notic.decode('utf-8').encode('gbk'))
        print answer_path
        self.log_insert(answer_path)
        # 返回答案结果
        reader = codecs.open(answer_path, 'r', 'gbk', 'ignore')
        return reader.read()

    '''
        将一个目录下所有doc和docx文件转成txt
        该目录下创建一个新目录data
        新目录下fileNames.txt创建一个文本存入所有的word文件名
        本版本具有一定的容错性，即允许对同一文件夹多次操作而不发生冲突
    '''

    def translate(self, path):
        all_FileNum = 0
        debug = 0
        if debug:
            print path
            # 该目录下所有文件的名字
        files = os.listdir(path)
        # 该目下创建一个新目录data，用来放转化后的txt文本
        New_dir = os.path.abspath(os.path.join(path, 'data'))
        if not os.path.exists(New_dir):
            os.mkdir(New_dir)
        if debug:
            print New_dir
            # 创建一个文本存入所有的word文件名
        fileNameSet = os.path.abspath(os.path.join(New_dir, 'fileNames.txt'))
        o = open(fileNameSet, "w")
        wordapp = False
        try:
            for filename in files:
                if debug:
                    print filename
                    # 如果不是word文件：继续
                if not fnmatch.fnmatch(filename, '*.doc') and not fnmatch.fnmatch(filename, '*.docx'):
                    continue
                    # 如果是word临时文件：继续
                if fnmatch.fnmatch(filename, '~$*'):
                    continue
                if debug:
                    print filename
                docpath = os.path.abspath(os.path.join(path, filename))

                # 得到一个新的文件名,把原文件名的后缀改成txt
                new_txt_name = ''
                if fnmatch.fnmatch(filename, '*.doc'):
                    new_txt_name = filename[:-4] + '.txt'
                else:
                    new_txt_name = filename[:-5] + '.txt'
                if debug:
                    print new_txt_name
                word_to_txt = os.path.join(os.path.join(path, 'data'), new_txt_name)
                wordapp = wc.Dispatch('Word.Application')
                doc = wordapp.Documents.Open(docpath)
                # 为了让python可以在后续操作中r方式读取txt和不产生乱码，参数为4
                doc.SaveAs(word_to_txt, 4)
                doc.Close()
                o.write(word_to_txt + '\n')
                all_FileNum += 1
        finally:
            wordapp.Quit()

        return word_to_txt

    '''
        进度条
    '''

    def Schedule(self, a, b, c):
        '''''
        a:已经下载的数据块
        b:数据块的大小
        c:远程文件的大小
        '''
        per = 100.0 * a * b / c
        if per > 100:
            per = 100
        self.pbar.update(per)

    '''
        获取问题，并提交答案
    '''

    def get_question(self, answer_data, task_html, task_url):
        print u'开始做题'
        self.log_insert(u'开始做题')
        # 匹配问题列表
        items = pq(task_html).find('div[class="button_red"]')
        if not (items):
            print u'该科目作业已完成了'
            self.log_insert(u'该科目作业已完成了')
        for item in items:
            item = pq(item).children('a').attr('href')
            # 匹配单个问题url
            print 'http://learning.cmr.com.cn/student/acourse/HomeworkCenter/' + item
            self.log_insert('http://learning.cmr.com.cn/student/acourse/HomeworkCenter/' + item)
            question_html = self.getHtmlSource(task_url + item)
            question_regex = u'【([^】]*)】'
            regex_content = re.compile(
                question_regex.encode('gbk'),
                re.S)
            question_num_items = re.findall(regex_content, question_html)
            answer = {}
            # print chardet.detect(answer_data)
            # 多线程匹配问题答案
            for question_num_item in question_num_items:
                for key, value in self.find_answer(question_num_item, answer_data).items():
                    answer.setdefault(key, value)
            # 获取提交答案路径
            regex_content = re.compile(
                '<form.*?id="form1".*?name="form1".*?action="(.*?)"',
                re.S)
            post_question_url_items = re.findall(regex_content, question_html)
            if not post_question_url_items:
                print u'该作业无法完成'
                self.log_insert(u'该作业无法完成')
                continue
            post_question_url = task_url + post_question_url_items[0]
            # 创建post体
            data = answer
            data['CourseID'] = \
                re.findall(re.compile('<input.*?name=\"CourseID\".*?value=\"(.*?)\"', re.S), question_html)[0]
            data['PMID'] = re.findall(re.compile('<input.*?name=\"PMID\".*?value=\"(.*?)\"', re.S), question_html)[0]
            data['tmpSID'] = re.findall(re.compile('<input.*?name=\'tmpSID\'.*?value=\'(.*?)\'', re.S), question_html)[
                0]
            data['strStandardScore'] = \
                re.findall(re.compile('<input.*?name=\'strStandardScore\'.*?value=\'(.*?)\'', re.S), question_html)[0]
            # post提交答案
            # test_url = 'http://192.168.92.129/Welcome/test11'
            print u'延迟10秒提交答案...'
            self.log_insert(u'延迟10秒提交答案...')
            time.sleep(10)
            result = self.getHtmlSource(post_question_url)
            print data
            self.log_insert(data)
            print self.getScore(result)
            self.log_insert(self.getScore(result))

        print u'该科目作业已全部完成！！'
        self.log_insert(u'该科目作业已全部完成！！')

    '''
        查找问题答案
    '''

    def find_answer(self, question_num_item, answer_data):
        answer = {}
        # 匹配问题答案
        answer_regex = u'案】'

        question_regex = question_num_item + '[^' + u'案' + ']*' + answer_regex + '([A-Z])'
        regex_content = re.compile(
            question_regex,
            re.S)
        # 单项选择题
        radio_items = re.findall(regex_content, answer_data)
        if radio_items:
            answer[question_num_item] = radio_items[0]
        else:
            # 判断题
            question_regex = question_num_item + '[^' + u'案' + ']*' + answer_regex + u'(正确|错误)'
            regex_content = re.compile(
                question_regex,
                re.S)
            judge_items = re.findall(regex_content, answer_data)
            if judge_items:
                if judge_items[0] == u'正确':
                    answer[question_num_item] = 1
                else:
                    answer[question_num_item] = 0
            else:
                # 多项选择题
                question_regex = question_num_item + '[^' + u'案' + ']*' + answer_regex + '([A-Z],[^\n]+)'
                regex_content = re.compile(
                    question_regex,
                    re.S)
                checkbox_items = re.findall(regex_content, answer_data)
                if checkbox_items:
                    answer[question_num_item] = checkbox_items[0].split(',')
                else:
                    answer[question_num_item] = ''
        return answer

    '''
        获取作业得分
    '''

    def getScore(self, html):
        regex_content = re.compile(
            '<div.*?class=\"line1\".*?>.*?<p>(.*?)</p>',
            re.S)
        items = re.findall(regex_content, html)
        if not items:
            print u'提交数据失败！'
            self.log_insert(u'提交数据失败！')
            return False
        return items[0]

    '''
        获取项目根目录
    '''

    def script_path(self):
        caller_file = inspect.stack()[1][1]  # caller's filename
        return os.path.abspath(os.path.dirname(caller_file))  # path

    '''
        开始完成各科目作业
    '''

    def work_task(self, index):
        print u'开始完成' + index + u'课程...'
        self.log_insert(u'开始完成' + index + u'课程...')
        self.url = self.all_task_url[index]
        html = self.getHtmlSource(self.url)
        if html == None:
            print u'服务器异常,请稍后再试！'
            self.log_insert(u'服务器异常,请稍后再试！')
            return False
        items = regex_content = re.compile(
            '<iframe.*?id="iframe".*?src=\"(.+?)\"',
            re.S)
        items = re.findall(regex_content, html)
        if not items:
            print u'服务器异常,请稍后再试！'
            self.log_insert(u'服务器异常,请稍后再试！')
            return False
        task_url = items[0]
        print task_url
        self.log_insert(task_url)
        regex_content = re.compile(
            '(.*?\/.*?)[^\/]*\.asp.*?',
            re.S)
        task_url_items = re.findall(regex_content, self.url)
        task_html = self.getHtmlSource(task_url_items[0] + task_url)
        answer_data = self.downloadTask(task_html)
        if not answer_data:
            return False
        self.get_question(answer_data, task_html, 'http://learning.cmr.com.cn/student/acourse/HomeworkCenter/')

    '''
        启动
    '''

    def run(self):
        items = self.treeview.get_children()
        for item in items:
            self.treeview.delete(item)
        self.getNotTask()
        for url in self.all_task_url:
            self.work_task(url)

    def __del__(self):
        self.previous_cookie = ''


App()
